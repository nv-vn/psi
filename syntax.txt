=== PSI ===
language made by haze.
 
=== Basics ===
== Comments
-- single line comment

-= multi
   line 
   comment =-  

== Function declaration

(scope) fn (name)(params) {
    body
}

example \/

from sys grab IO -- import statements, specific variables or classes etc
-- could also be from sys grab * or from sys

pv fn sayHello(username: string) {
    IO.print("Hello, %username")
}

pb fn add(a: int, b: int) = int {
    a + b
}

-- you can omit return values, they are inferred.
pb fn add(a: int, b: int) { a + b }

-- you can also replace function names for operators.
pb fn (T)|>(f(x: T) = T) = T { f(x) } 
 -- 1 |> {|x| + 15}  equates to 16
 -= <stolen var and val :> >
    var x = 15 |> {|x| x + 15}
    var z = x |> {|x| -> x / 2}
    var y = 15 == z -- equates to true.
 =- 

== Anonymous functions
-- where ls is a map of integers
ls.map{|f| f * f} -- square
ls.map{|f: Int| -> f * f} -- another square example 
ls.map{|x| -> x as String} -- uses stringable trait to convert to a utf-8 encoded string
ls.sort{|a, b| -> String.alphabet } -- static comparitor, abc123 , a > b, b > c, z > 0 etc

== Structs
-- tiny variable length stuff
struct Rectangle {
    x: int
    y: int

    -=
    = return: the rectangle with self + other
    = other: the other rectangle
    =-
    pb fn add(other: Rectangle) = Rectangle {
        Rectangle(self.x + other.x, self.y + other.y)
    } 

    -= 
    = return: the rectangle with self - other
    = other: the other rectangle
    =- 
    pb fn sub(other: Rectangle) {
        Rectangle(self.x - other.x, self.y - other.y)
    }

}

== Traits

struct [conv<string>] Animal {
    name: string
    age: int
    
    tr conv<string> { "%name, age: %age" } -- giving this struct a trait, the ability to be converted to a string.

}

struct Dog ^ Animal {
    fleas: int
    tr conv<string> { "%{conv<string>} fleas: %fleas" } -- overriding already overridden traits. 
}

== Variables

-- variables that are not encased within a struct class etc must be declared using val and var.
-- val = value, non changing
-- var = variable, which varies.

val x: string = "Hello"
val y: string -- empty?
val z: = "Hello"
var a = 15
a++
println(a) -- 16

== Types

-- primitive types are always lowercase.
-- string, int, double, char and bool

-- there are some core types like
-- either, pair, the collections and range
-- to see documentation on these types see modules/core

== Parameter Predicates

-- you are able to put predicates on function parameters to reduce the amount of if checks, like perl6.

pb fn div(a: int, bi: int | [b > 0]) {...} -- divide function that can avoid a divide-by-zero error.
-- these can throw two types of exceptions, compiler errors and runtime errors.
-- lets say we have constant x set to 0.
val x: int -- default value is 0
-- if we try and use it in our div function, the compiler will tell us that x is 0 and fails to meet the predicates requirements.
-- you are also allowed to have multiple predicates
pb fn thing(str: string | [str.len > 15, str.len < 30]) -- strings are immutable, so their lengths are fixed.

